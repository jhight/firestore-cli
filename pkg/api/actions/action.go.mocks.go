// Code generated by MockGen. DO NOT EDIT.
// Source: action.go
//
// Generated by this command:
//
//	mockgen -typed -package actions -source action.go -destination action.go.mocks.go
//

// Package actions is a generated GoMock package.
package actions

import (
	reflect "reflect"

	cobra "github.com/spf13/cobra"
	gomock "go.uber.org/mock/gomock"
)

// MockAction is a mock of Action interface.
type MockAction struct {
	ctrl     *gomock.Controller
	recorder *MockActionMockRecorder
}

// MockActionMockRecorder is the mock recorder for MockAction.
type MockActionMockRecorder struct {
	mock *MockAction
}

// NewMockAction creates a new mock instance.
func NewMockAction(ctrl *gomock.Controller) *MockAction {
	mock := &MockAction{ctrl: ctrl}
	mock.recorder = &MockActionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAction) EXPECT() *MockActionMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockAction) Add(actions ...Action) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range actions {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Add", varargs...)
}

// Add indicates an expected call of Add.
func (mr *MockActionMockRecorder) Add(actions ...any) *MockActionAddCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockAction)(nil).Add), actions...)
	return &MockActionAddCall{Call: call}
}

// MockActionAddCall wrap *gomock.Call
type MockActionAddCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionAddCall) Return() *MockActionAddCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionAddCall) Do(f func(...Action)) *MockActionAddCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionAddCall) DoAndReturn(f func(...Action)) *MockActionAddCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Command mocks base method.
func (m *MockAction) Command() *cobra.Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Command")
	ret0, _ := ret[0].(*cobra.Command)
	return ret0
}

// Command indicates an expected call of Command.
func (mr *MockActionMockRecorder) Command() *MockActionCommandCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Command", reflect.TypeOf((*MockAction)(nil).Command))
	return &MockActionCommandCall{Call: call}
}

// MockActionCommandCall wrap *gomock.Call
type MockActionCommandCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionCommandCall) Return(arg0 *cobra.Command) *MockActionCommandCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionCommandCall) Do(f func() *cobra.Command) *MockActionCommandCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionCommandCall) DoAndReturn(f func() *cobra.Command) *MockActionCommandCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Execute mocks base method.
func (m *MockAction) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockActionMockRecorder) Execute() *MockActionExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockAction)(nil).Execute))
	return &MockActionExecuteCall{Call: call}
}

// MockActionExecuteCall wrap *gomock.Call
type MockActionExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionExecuteCall) Return(arg0 error) *MockActionExecuteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionExecuteCall) Do(f func() error) *MockActionExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionExecuteCall) DoAndReturn(f func() error) *MockActionExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Initializer mocks base method.
func (m *MockAction) Initializer() Initializer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initializer")
	ret0, _ := ret[0].(Initializer)
	return ret0
}

// Initializer indicates an expected call of Initializer.
func (mr *MockActionMockRecorder) Initializer() *MockActionInitializerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initializer", reflect.TypeOf((*MockAction)(nil).Initializer))
	return &MockActionInitializerCall{Call: call}
}

// MockActionInitializerCall wrap *gomock.Call
type MockActionInitializerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionInitializerCall) Return(arg0 Initializer) *MockActionInitializerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionInitializerCall) Do(f func() Initializer) *MockActionInitializerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionInitializerCall) DoAndReturn(f func() Initializer) *MockActionInitializerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetArgs mocks base method.
func (m *MockAction) SetArgs(args []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetArgs", args)
}

// SetArgs indicates an expected call of SetArgs.
func (mr *MockActionMockRecorder) SetArgs(args any) *MockActionSetArgsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetArgs", reflect.TypeOf((*MockAction)(nil).SetArgs), args)
	return &MockActionSetArgsCall{Call: call}
}

// MockActionSetArgsCall wrap *gomock.Call
type MockActionSetArgsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockActionSetArgsCall) Return() *MockActionSetArgsCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockActionSetArgsCall) Do(f func([]string)) *MockActionSetArgsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockActionSetArgsCall) DoAndReturn(f func([]string)) *MockActionSetArgsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
