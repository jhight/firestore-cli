// Code generated by MockGen. DO NOT EDIT.
// Source: store.go
//
// Generated by this command:
//
//	mockgen -typed -package client -source store.go -destination store.go.mocks.go
//

// Package client is a generated GoMock package.
package client

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	query "jhight.com/firestore-cli/pkg/api/client/query"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStoreMockRecorder) Close() *MockStoreCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close))
	return &MockStoreCloseCall{Call: call}
}

// MockStoreCloseCall wrap *gomock.Call
type MockStoreCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreCloseCall) Return(arg0 error) *MockStoreCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreCloseCall) Do(f func() error) *MockStoreCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreCloseCall) DoAndReturn(f func() error) *MockStoreCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Collections mocks base method.
func (m *MockStore) Collections(input query.Input) ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collections", input)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collections indicates an expected call of Collections.
func (mr *MockStoreMockRecorder) Collections(input any) *MockStoreCollectionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collections", reflect.TypeOf((*MockStore)(nil).Collections), input)
	return &MockStoreCollectionsCall{Call: call}
}

// MockStoreCollectionsCall wrap *gomock.Call
type MockStoreCollectionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreCollectionsCall) Return(arg0 []any, arg1 error) *MockStoreCollectionsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreCollectionsCall) Do(f func(query.Input) ([]any, error)) *MockStoreCollectionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreCollectionsCall) DoAndReturn(f func(query.Input) ([]any, error)) *MockStoreCollectionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockStore) Create(path string, fields map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", path, fields)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockStoreMockRecorder) Create(path, fields any) *MockStoreCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStore)(nil).Create), path, fields)
	return &MockStoreCreateCall{Call: call}
}

// MockStoreCreateCall wrap *gomock.Call
type MockStoreCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreCreateCall) Return(arg0 error) *MockStoreCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreCreateCall) Do(f func(string, map[string]any) error) *MockStoreCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreCreateCall) DoAndReturn(f func(string, map[string]any) error) *MockStoreCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockStore) Delete(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStoreMockRecorder) Delete(path any) *MockStoreDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStore)(nil).Delete), path)
	return &MockStoreDeleteCall{Call: call}
}

// MockStoreDeleteCall wrap *gomock.Call
type MockStoreDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreDeleteCall) Return(arg0 error) *MockStoreDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreDeleteCall) Do(f func(string) error) *MockStoreDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreDeleteCall) DoAndReturn(f func(string) error) *MockStoreDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteField mocks base method.
func (m *MockStore) DeleteField(path, field string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteField", path, field)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteField indicates an expected call of DeleteField.
func (mr *MockStoreMockRecorder) DeleteField(path, field any) *MockStoreDeleteFieldCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteField", reflect.TypeOf((*MockStore)(nil).DeleteField), path, field)
	return &MockStoreDeleteFieldCall{Call: call}
}

// MockStoreDeleteFieldCall wrap *gomock.Call
type MockStoreDeleteFieldCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreDeleteFieldCall) Return(arg0 error) *MockStoreDeleteFieldCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreDeleteFieldCall) Do(f func(string, string) error) *MockStoreDeleteFieldCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreDeleteFieldCall) DoAndReturn(f func(string, string) error) *MockStoreDeleteFieldCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockStore) Get(input query.Input) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", input)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStoreMockRecorder) Get(input any) *MockStoreGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStore)(nil).Get), input)
	return &MockStoreGetCall{Call: call}
}

// MockStoreGetCall wrap *gomock.Call
type MockStoreGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreGetCall) Return(arg0 map[string]any, arg1 error) *MockStoreGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreGetCall) Do(f func(query.Input) (map[string]any, error)) *MockStoreGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreGetCall) DoAndReturn(f func(query.Input) (map[string]any, error)) *MockStoreGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsPathToCollection mocks base method.
func (m *MockStore) IsPathToCollection(path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPathToCollection", path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPathToCollection indicates an expected call of IsPathToCollection.
func (mr *MockStoreMockRecorder) IsPathToCollection(path any) *MockStoreIsPathToCollectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPathToCollection", reflect.TypeOf((*MockStore)(nil).IsPathToCollection), path)
	return &MockStoreIsPathToCollectionCall{Call: call}
}

// MockStoreIsPathToCollectionCall wrap *gomock.Call
type MockStoreIsPathToCollectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreIsPathToCollectionCall) Return(arg0 bool) *MockStoreIsPathToCollectionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreIsPathToCollectionCall) Do(f func(string) bool) *MockStoreIsPathToCollectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreIsPathToCollectionCall) DoAndReturn(f func(string) bool) *MockStoreIsPathToCollectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsPathToDocument mocks base method.
func (m *MockStore) IsPathToDocument(path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPathToDocument", path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPathToDocument indicates an expected call of IsPathToDocument.
func (mr *MockStoreMockRecorder) IsPathToDocument(path any) *MockStoreIsPathToDocumentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPathToDocument", reflect.TypeOf((*MockStore)(nil).IsPathToDocument), path)
	return &MockStoreIsPathToDocumentCall{Call: call}
}

// MockStoreIsPathToDocumentCall wrap *gomock.Call
type MockStoreIsPathToDocumentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreIsPathToDocumentCall) Return(arg0 bool) *MockStoreIsPathToDocumentCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreIsPathToDocumentCall) Do(f func(string) bool) *MockStoreIsPathToDocumentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreIsPathToDocumentCall) DoAndReturn(f func(string) bool) *MockStoreIsPathToDocumentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Query mocks base method.
func (m *MockStore) Query(input query.Input) ([]map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", input)
	ret0, _ := ret[0].([]map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockStoreMockRecorder) Query(input any) *MockStoreQueryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockStore)(nil).Query), input)
	return &MockStoreQueryCall{Call: call}
}

// MockStoreQueryCall wrap *gomock.Call
type MockStoreQueryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreQueryCall) Return(arg0 []map[string]any, arg1 error) *MockStoreQueryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreQueryCall) Do(f func(query.Input) ([]map[string]any, error)) *MockStoreQueryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreQueryCall) DoAndReturn(f func(query.Input) ([]map[string]any, error)) *MockStoreQueryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Set mocks base method.
func (m *MockStore) Set(path string, fields map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", path, fields)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockStoreMockRecorder) Set(path, fields any) *MockStoreSetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStore)(nil).Set), path, fields)
	return &MockStoreSetCall{Call: call}
}

// MockStoreSetCall wrap *gomock.Call
type MockStoreSetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreSetCall) Return(arg0 error) *MockStoreSetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreSetCall) Do(f func(string, map[string]any) error) *MockStoreSetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreSetCall) DoAndReturn(f func(string, map[string]any) error) *MockStoreSetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockStore) Update(path string, fields map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", path, fields)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockStoreMockRecorder) Update(path, fields any) *MockStoreUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStore)(nil).Update), path, fields)
	return &MockStoreUpdateCall{Call: call}
}

// MockStoreUpdateCall wrap *gomock.Call
type MockStoreUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreUpdateCall) Return(arg0 error) *MockStoreUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreUpdateCall) Do(f func(string, map[string]any) error) *MockStoreUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreUpdateCall) DoAndReturn(f func(string, map[string]any) error) *MockStoreUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
